<?xml version="1.0" encoding="UTF-8" ?>

<project name="PlantUML" description="Provides PlantUML integration" default="help">

    <!--Properties-->
    <property file="build.properties.ini"/>
    <resolvepath propertyName="dir.output.absolute" file="${dir.output}"/>
    <resolvepath propertyName="dir.input.absolute" file="${dir.input}"/>
    <resolvepath propertyName="dir.tmp.absolute" file="${dir.tmp}"/>
    <property name="plantuml.version.location" value="./resources/plantuml.version.txt"/>


    <!--Basic help-->
    <target name="help">
        <echo>
            Target: init
            Generates build.properties file

            Target: test
            Tests plantuml executable and plantuml.jar

            Target: jar:update
            Downloads last version of plantuml.jar
        </echo>
    </target>


    <!--Generate build.properties-->
    <target name="init" description="Wizard to create build.properties">
        <inifile source="build.properties.ini.dist" dest="build.properties.ini"/>
    </target>


    <!--Update bin/plantuml.jar-->
    <target name="jar:update"
            depends="jar:download, jar:update-readme, test"
            description="Update project with latest version of PlantUML"/>


    <!--Update README.md-->
    <target name="jar:update-readme"
            description="Sets current PlantUML version in README.md"
            depends="jar:save-version">
        <copy file="./README.md" tofile="${dir.tmp.absolute}/README.md" overwrite="true">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="&lt;!--start--&gt;[[:space:][:alnum:][:punct:]]*&lt;!--end--&gt;"
                            replace="&lt;!--start--&gt;${line.separator}${plantuml.version}${line.separator}&lt;!--end--&gt;"/>
                </replaceregexp>
            </filterchain>
        </copy>
        <move file="${dir.tmp.absolute}/README.md" tofile="./README.md"/>
    </target>


    <!--Download bin/plantuml.jar-->
    <target name="jar:download" description="Download latest version of PlantUML">
        <delete file="bin/plantuml.jar"/>
        <httpget dir="bin"
                 url="https://sourceforge.net/projects/plantuml/files/latest/download?source=typ_redirect"
                 followRedirects="true"
                 filename="plantuml.jar"/>
    </target>


    <!--${plantuml.version}-->
    <target name="jar:version" description="Prints PlantUML version">
        <exec executable="bin/plantuml" outputProperty="plantuml.output">
            <arg value="-v"/>
        </exec>
        <propertyregex property="plantuml.version"
                       pattern="\bPlantUML Version \d+\.\d+\.\d+\b"
                       subject="${plantuml.output}"
                       match="$0"
                       defaultvalue="-"
                       override="true"/>
        <echo message="${plantuml.version}"/>
    </target>


    <!--resources/plantuml.version.txt-->
    <target name="jar:save-version"
            description="Saves current PlantUML version in text file"
            depends="jar:version">
        <echo message="${plantuml.version}" file="${plantuml.version.location}"/>
        <notifysend title="Phing" msg="${plantuml.version}" icon="info"/>
    </target>


    <!--Test plantuml.jar and executable-->
    <target name="test" depends="jar:test, executable:test" description="Runs all tests"/>


    <!--Test plantuml.jar-->
    <target name="jar:test" description="Check the correct functioning of plantuml.jar">
        <phingcall target="test:clean"/>
        <phingcall target="jar:run"/>
        <phingcall target="test:validate-output"/>
    </target>


    <!--Test bin/plantuml-->
    <target name="executable:test" description="Check the correct functioning of plantuml executable">
        <phingcall target="test:clean"/>
        <phingcall target="executable:run"/>
        <phingcall target="test:validate-output"/>
    </target>


    <!--Execute plantuml.jar-->
    <target name="jar:run" description="Generates .png files with plantuml.jar">
        <mkdir dir="${dir.output.absolute}"/>
        <exec executable="java" passthru="true" checkreturn="true">
            <arg value="-jar"/>
            <arg value="bin/plantuml.jar"/>
            <arg value="-verbose"/>
            <arg value="-o"/>
            <arg value="${dir.output.absolute}"/>
            <arg value="${dir.input.absolute}/*.puml"/>
        </exec>
    </target>


    <!--Testing executable-->
    <target name="executable:run" description="Generates .png files with plantuml executable">
        <mkdir dir="${dir.output.absolute}"/>
        <exec executable="bin/plantuml" passthru="true" checkreturn="true">
            <arg value="-verbose"/>
            <arg value="-o"/>
            <arg value="${dir.output.absolute}"/>
            <arg value="${dir.input.absolute}/*.puml"/>
        </exec>
    </target>


    <!--Clean png files-->
    <target name="test:clean" description="Deletes output dir">
        <delete dir="${dir.output.absolute}" verbose="true"/>
    </target>


    <!--Checks png files exists-->
    <target name="test:validate-output" description="Verifies the existence of .png files">
        <mkdir dir="${dir.tmp.absolute}"/>

        <!--Create manifest file-->
        <manifest file="${dir.tmp.absolute}/expected-output.txt">
            <fileset dir="${dir.input.absolute}">
                <include name="*.puml"/>
            </fileset>
        </manifest>

        <!--Replace extensions in manifest file-->
        <reflexive>
            <fileset dir="${dir.tmp.absolute}">
                <include name="expected-output.txt"/>
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp pattern="\.puml" replace=".png" ignoreCase="true"/>
                </replaceregexp>
            </filterchain>
        </reflexive>

        <!--Checking files existence-->
        <foreach target="test:file-check" param="filename" absparam="filename.absolute">
            <filelist dir="${dir.output.absolute}" listfile="${dir.tmp.absolute}/expected-output.txt"/>
        </foreach>
    </target>


    <!--Helper target, fails if file isn't found-->
    <target name="test:file-check" hidden="true">
        <if>
            <available file="${filename.absolute}"/>
            <then>
                <echo message="OK: ${filename}"/>
            </then>
            <else>
                <fail message="NOT FOUND: ${filename.absolute}"/>
            </else>
        </if>
    </target>


    <target name="properties">
        <echoproperties/>
    </target>

</project>
